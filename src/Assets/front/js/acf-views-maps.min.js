/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*****************************************!*\
  !*** ./lite/front/js/acf-views-maps.ts ***!
  \*****************************************/
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var MyMap = /*#__PURE__*/function () {
  function MyMap(element) {
    _classCallCheck(this, MyMap);
    this.element = element;
    this.map = null;
    this.mapMarkers = [];
    this.isZoomSet = false;
  }
  _createClass(MyMap, [{
    key: "readMarkers",
    value: function readMarkers() {
      var _this = this;
      _toConsumableArray(this.element.children).forEach(function (markerElement) {
        var lat = markerElement.dataset.hasOwnProperty('lat') ? markerElement.dataset['lat'] : '0';
        var lng = markerElement.dataset.hasOwnProperty('lng') ? markerElement.dataset['lng'] : '0';
        var icon = markerElement.dataset.hasOwnProperty('icon') ? markerElement.dataset['icon'] : '';
        var iconTitle = markerElement.dataset.hasOwnProperty('title') ? markerElement.dataset['title'] : '';
        _this.mapMarkers.push({
          lat: parseFloat(lat),
          lng: parseFloat(lng),
          icon: icon,
          iconTitle: iconTitle
        });
        markerElement.remove();
      });
    }
  }, {
    key: "createMap",
    value: function createMap() {
      this.isZoomSet = this.element.dataset.hasOwnProperty('zoom') && !!parseInt(this.element.dataset['zoom']);
      var mapArgs = {
        zoom: parseInt(this.element.dataset.hasOwnProperty('zoom') ? this.element.dataset['zoom'] : '16'),
        mapTypeId: window['google'].maps.MapTypeId.ROADMAP
      };
      this.map = new window['google'].maps.Map(this.element, mapArgs);
    }
  }, {
    key: "createMarkers",
    value: function createMarkers() {
      var _this2 = this;
      this.mapMarkers.forEach(function (marker) {
        var markerData = {
          position: {
            lat: marker.lat,
            lng: marker.lng
          },
          map: _this2.map
        };
        if (marker.icon) {
          markerData['icon'] = marker.icon;
        }
        if (marker.iconTitle) {
          markerData['title'] = marker.iconTitle;
        }
        new window['google'].maps.Marker(markerData);
      });
    }
  }, {
    key: "centerMap",
    value: function centerMap() {
      // Create map boundaries from all map markers.
      var bounds = new window['google'].maps.LatLngBounds();
      if (this.mapMarkers.length) {
        this.mapMarkers.forEach(function (marker) {
          bounds.extend({
            lat: marker.lat,
            lng: marker.lng
          });
        });
      } else {
        // If no markers, then center map by the field settings from ACF
        var centerLat = this.element.dataset['centerLat'];
        var centerLng = this.element.dataset['centerLng'];
        if (centerLng || centerLat) {
          bounds.extend({
            lat: parseFloat(centerLat),
            lng: parseFloat(centerLng)
          });
        }
      }
      // Center map to the middle of the bounds.
      this.map.setCenter(bounds.getCenter());
      // If custom zoom isn't set, then set zoom to fit all markers.
      if (this.mapMarkers.length > 1 && !this.isZoomSet) {
        this.map.fitBounds(bounds);
      }
    }
  }, {
    key: "init",
    value: function init() {
      if (!window.hasOwnProperty('google') || !window['google'].hasOwnProperty('maps') || !window['google'].maps.hasOwnProperty('Map') || !window['google'].maps.hasOwnProperty('Marker') || !window['google'].maps.hasOwnProperty('LatLngBounds') || !window['google'].maps.hasOwnProperty('MapTypeId') || !window['google'].maps.MapTypeId.hasOwnProperty('ROADMAP')) {
        console.log('Advanced Views : Google maps isn\'t available');
        return;
      }
      // before the map initialization, because during creation HTML is changed
      this.readMarkers();
      this.createMap();
      this.createMarkers();
      this.centerMap();
    }
  }]);
  return MyMap;
}();
var MyMaps = /*#__PURE__*/function () {
  function MyMaps() {
    _classCallCheck(this, MyMaps);
    this.isMapsLoaded = false;
    this.mapsToInit = [];
    this.maps = window['acfViewsMaps'] || [];
    if (!this.maps) {
      console.log("Advanced Views: Galleries data is missing");
      return;
    }
    window['acfViewsGoogleMaps'] = this.mapsLoadedCallback.bind(this);
    'loading' !== document.readyState ? this.setup() : window.addEventListener('DOMContentLoaded', this.setup.bind(this));
  }
  _createClass(MyMaps, [{
    key: "setup",
    value: function setup() {
      var _this3 = this;
      var observer = new MutationObserver(function (records, observer) {
        var _iterator = _createForOfIteratorHelper(records),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var record = _step.value;
            record.addedNodes.forEach(function (addedNode) {
              _this3.addListeners(addedNode);
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
      this.addListeners(document.body);
    }
  }, {
    key: "mapsLoadedCallback",
    value: function mapsLoadedCallback() {
      this.isMapsLoaded = true;
      this.mapsToInit.forEach(function (map) {
        map.init();
      });
      this.mapsToInit = [];
    }
  }, {
    key: "addListeners",
    value: function addListeners(element) {
      var _this4 = this;
      if (Node.ELEMENT_NODE !== element.nodeType) {
        return;
      }
      this.maps.forEach(function (mapSelector) {
        element.querySelectorAll(mapSelector).forEach(function (mapElement) {
          var map = new MyMap(mapElement);
          if (!_this4.isMapsLoaded) {
            _this4.mapsToInit.push(map);
            return;
          }
          map.init();
        });
      });
    }
  }]);
  return MyMaps;
}();
new MyMaps();
/******/ })()
;