/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!****************************************!*\
  !*** ./lite/front/js/live-reloader.ts ***!
  \****************************************/
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var INDICATOR_COLORS = {
  ACTUAL: 'green',
  UPDATING: 'orange',
  ERROR: 'red',
  INACTIVE: 'blue'
};
var Reloader = /*#__PURE__*/function () {
  function Reloader(nonce, postId, postHash, timeouts, isDebugMode) {
    _classCallCheck(this, Reloader);
    this.isDebugMode = false;
    this.items = {};
    this.nonce = nonce;
    this.postId = postId;
    this.postHash = postHash;
    this.indicator = document.createElement('div');
    this.isInactive = false;
    this.isMouseMoved = false;
    this.idGeneratorData = [];
    this.isDebugMode = isDebugMode;
    this.nextRequestTimerId = 0;
    this.timeouts = timeouts;
    this.ajaxRequestTime = new Date();
    this.debug('Initialized', {
      timeouts: this.timeouts
    });
    "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", this.setup.bind(this)) : this.setup();
  }
  _createClass(Reloader, [{
    key: "debug",
    value: function debug(message) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (false === this.isDebugMode) {
        return;
      }
      args['_time'] = new Date().toISOString();
      console.log('AVF Live Reload: ' + message, args);
    }
  }, {
    key: "removeItemsWithParentCardId",
    value: function removeItemsWithParentCardId(parentCardId) {
      var _this = this;
      Object.keys(this.items).forEach(function (itemId) {
        var item = _this.items[itemId];
        if (parentCardId === item.parentCardId) {
          delete _this.items[itemId];
        }
      });
    }
  }, {
    key: "getStylesRoot",
    value: function getStylesRoot() {
      // styles can be placed inside the web component.
      return window['avfStylesRoot'] || document;
    }
  }, {
    key: "getCssTag",
    value: function getCssTag(uniqueId) {
      return this.getStylesRoot().querySelector('style[data-advanced-views-asset=' + uniqueId + ']');
    }
  }, {
    key: "updateTag",
    value: function updateTag(type, uniqueId, code) {
      // null means no changes.
      if (null === code) {
        return;
      }
      var tag = 'style' === type ? this.getCssTag(uniqueId) : document.querySelector(type + '[data-advanced-views-asset=' + uniqueId + ']');
      if (null === tag && '' !== code) {
        tag = document.createElement(type);
        tag.setAttribute('data-advanced-views-asset', uniqueId);
        var root = 'style' === type ? this.getStylesRoot() : document.head;
        root.appendChild(tag);
      }
      if (null !== tag) {
        tag.innerHTML = code;
      }
    }
  }, {
    key: "processChangedItems",
    value: function processChangedItems(changedItems) {
      var _this2 = this;
      var idsWithProcessedAssets = [];
      Object.keys(changedItems).forEach(function (itemId) {
        if (false === _this2.items.hasOwnProperty(itemId)) {
          console.log('Advanced Views Framework - changed item with id: ' + itemId + ' not found.');
          return;
        }
        var item = _this2.items[itemId];
        var codeHashes = changedItems[itemId]['codeHashes'] || {};
        var css = true === changedItems[itemId].hasOwnProperty('css') ? changedItems[itemId]['css'] : null;
        var js = true === changedItems[itemId].hasOwnProperty('js') ? changedItems[itemId]['js'] : null;
        var html = true === changedItems[itemId].hasOwnProperty('html') ? changedItems[itemId]['html'] : null;
        // we need to remove all the children of this Card, as the Card will be replaced,
        // and we'll have the new items that present them.
        if (item.uniqueId.startsWith('card_') && '' === item.parentCardId) {
          _this2.removeItemsWithParentCardId(itemId);
        }
        item.codeHashes = codeHashes;
        // we need to update the assets only once, regardless on the count of the same elements on the page.
        if (false === idsWithProcessedAssets.includes(itemId)) {
          _this2.updateTag('style', item.uniqueId, css);
          _this2.updateTag('script', item.uniqueId, js);
        }
        // html is not present, if it's about an item inside the Card.
        if (null !== html) {
          item.element.outerHTML = html;
          // update pointer to the new element.
          item.element = item.reload_element.nextElementSibling;
        }
        idsWithProcessedAssets.push(itemId);
        _this2.debug('Updated item', {
          itemId: itemId,
          isCssChanged: null !== css,
          isJsChanged: null !== js,
          isHtmlChanged: null !== html,
          data: changedItems[itemId]
        });
      });
      var changedItemsCount = Object.keys(changedItems).length;
      if (changedItemsCount > 0) {
        this.debug('Updated items', {
          changedItemsCount: changedItemsCount,
          newItemsLength: Object.keys(this.items).length
        });
      }
    }
  }, {
    key: "processResponse",
    value: function processResponse(data) {
      this.debug('Server responded', {
        _requestTimeInSeconds: (new Date().getTime() - this.ajaxRequestTime.getTime()) / 1000,
        data: data
      });
      if (data.hasOwnProperty('error')) {
        console.error('Advanced Views Framework - Rest API request error:', data.error);
        this.updateIndicatorColor(INDICATOR_COLORS.ERROR);
        return;
      }
      if (true === data.hasOwnProperty('isPageChanged')) {
        window.location.reload();
        return;
      }
      this.processChangedItems(data.changedItems);
      if (true === this.isInactive) {
        return;
      }
      this.updateIndicatorColor(INDICATOR_COLORS.ACTUAL);
      this.scheduleRequest(this.timeouts.REFRESH);
    }
  }, {
    key: "makeRefreshRequest",
    value: function makeRefreshRequest() {
      var _this3 = this;
      this.updateIndicatorColor(INDICATOR_COLORS.UPDATING);
      var items = {};
      Object.keys(this.items).forEach(function (itemId) {
        var item = _this3.items[itemId];
        items[itemId] = {
          unique_id: item.uniqueId,
          code_hashes: item.codeHashes,
          parent_card_id: item.parentCardId,
          shortcode_arguments: item.shortcodeArguments,
          is_gutenberg_block: item.isGutenbergBlock
        };
      });
      var requestArgs = {
        post_id: this.postId,
        post_hash: this.postHash,
        items: items
      };
      this.debug('Sending request', requestArgs);
      this.ajaxRequestTime = new Date();
      fetch('/wp-json/acf_views/v1/live-reloader', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-WP-Nonce': this.nonce
        },
        body: JSON.stringify(requestArgs)
      }).then(function (response) {
        return response.json();
      }).then(this.processResponse.bind(this))["catch"](function (error) {
        return function () {
          console.error('Advanced Views Framework - Rest API request error:', error);
          _this3.updateIndicatorColor(INDICATOR_COLORS.ERROR);
        };
      });
    }
  }, {
    key: "scheduleRequest",
    value: function scheduleRequest(timeout) {
      var _this4 = this;
      if (true === this.isInactive) {
        this.debug('Skipping request scheduling due to the inactive mode');
        return;
      }
      // @ts-ignore
      this.nextRequestTimerId = setTimeout(function () {
        _this4.nextRequestTimerId = 0;
        _this4.makeRefreshRequest();
      }, timeout);
    }
  }, {
    key: "updateIndicatorColor",
    value: function updateIndicatorColor(color) {
      this.indicator.style.backgroundColor = color;
    }
  }, {
    key: "addItem",
    value: function addItem(item) {
      if (false === this.idGeneratorData.hasOwnProperty(item.uniqueId)) {
        this.idGeneratorData[item.uniqueId] = 0;
      }
      this.idGeneratorData[item.uniqueId]++;
      var itemId = item.uniqueId + '_' + this.idGeneratorData[item.uniqueId];
      this.items[itemId] = item;
    }
  }, {
    key: "setup",
    value: function setup() {
      var _this5 = this;
      Object.assign(this.indicator.style, {
        width: '10px',
        height: '10px',
        position: 'fixed',
        bottom: '20px',
        left: '20px',
        zIndex: '9999',
        backgroundColor: INDICATOR_COLORS.ACTUAL,
        borderRadius: '50%'
      });
      document.body.append(this.indicator);
      document.addEventListener('mousemove', function () {
        _this5.isMouseMoved = true;
        if (false === _this5.isInactive) {
          return;
        }
        _this5.debug('Leaving inactive mode');
        _this5.isInactive = false;
        _this5.makeRefreshRequest();
      });
      setInterval(function () {
        _this5.isInactive = false === _this5.isMouseMoved;
        _this5.isMouseMoved = false;
        if (false === _this5.isInactive) {
          return;
        }
        if (window.innerWidth < 992) {
          _this5.isInactive = false;
          _this5.debug('Skipping inactive mode due to the mobile view');
          return;
        }
        if (0 !== _this5.nextRequestTimerId) {
          clearTimeout(_this5.nextRequestTimerId);
          _this5.nextRequestTimerId = 0;
          _this5.debug('Request timer cleared while entering the inactive mode');
        }
        _this5.debug('Entering inactive mode');
        _this5.updateIndicatorColor(INDICATOR_COLORS.INACTIVE);
      }, this.timeouts.INACTIVE);
      this.scheduleRequest(this.timeouts.REFRESH);
    }
  }]);
  return Reloader;
}();
var reloader = null;
var AvfLiveReloader = /*#__PURE__*/function (_HTMLElement) {
  _inherits(AvfLiveReloader, _HTMLElement);
  var _super = _createSuper(AvfLiveReloader);
  function AvfLiveReloader() {
    _classCallCheck(this, AvfLiveReloader);
    return _super.apply(this, arguments);
  }
  _createClass(AvfLiveReloader, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", this.setup.bind(this)) : this.setup();
    }
  }, {
    key: "setup",
    value: function setup() {
      var data = {};
      try {
        data = JSON.parse(this.dataset['element']);
      } catch (Error) {
        console.error('Advanced Views Framework: error parsing live-reloading data attribute.');
        return;
      }
      reloader.addItem({
        uniqueId: data['uniqueId'] || '',
        codeHashes: data['codeHashes'] || '',
        parentCardId: data['parentCardId'] || '',
        shortcodeArguments: data['shortcodeArguments'] || {},
        isGutenbergBlock: data['isGutenbergBlock'] || false,
        reload_element: this,
        element: this.nextElementSibling
      });
    }
  }]);
  return AvfLiveReloader;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
function init() {
  var nonce = window['avfLiveReloading']['nonce'] || '';
  var isDevMode = window['avfLiveReloading']['isDevMode'] || false;
  var interval = window['avfLiveReloading']['interval'] || 5;
  var inactiveDelay = window['avfLiveReloading']['inactiveDelay'] || 20;
  var postId = window['avfLiveReloading']['postId'] || '';
  var postHash = window['avfLiveReloading']['postHash'] || '';
  // postId and postHash can be empty (e.g. on archive pages).
  if ('' === nonce) {
    console.error('Advanced Views Framework: data for live reloading is not set.');
    return;
  }
  var timeouts = {
    REFRESH: interval * 1000,
    INACTIVE: inactiveDelay * 1000
  };
  reloader = new Reloader(nonce, postId, postHash, timeouts, isDevMode);
  customElements.define("avf-live-reloader", AvfLiveReloader);
}
init();
/******/ })()
;